{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Water-Quality-Analyzer/app/api/analyze/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { Jimp } from \"jimp\";\n\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get(\"file\");\n\n    if (!file || !(file instanceof Blob)) {\n      return NextResponse.json(\n        { error: \"Invalid file input\" },\n        { status: 400 }\n      );\n    }\n\n    // Convert file to buffer\n    const buffer = Buffer.from(await file.arrayBuffer());\n\n    // Process image using Jimp\n    const image = await Jimp.read(buffer);\n    \n    let totalBlue = 0;\n    let totalPixels = 0;\n\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, (_x, _y, idx) => {\n      const blue = image.bitmap.data[idx + 2];\n      totalBlue += blue;\n      totalPixels++;\n    });\n\n    const averageBlue = totalBlue / totalPixels;\n\n    let waterQuality = \"Unknown\";\n    if (averageBlue > 200) {\n      waterQuality = \"Excellent\";\n    } else if (averageBlue > 150) {\n      waterQuality = \"Good\";\n    } else if (averageBlue > 100) {\n      waterQuality = \"Fair\";\n    } else {\n      waterQuality = \"Poor\";\n    }\n\n    return NextResponse.json({ result: waterQuality }, { status: 200 });\n  } catch (error) {\n    console.error(\"Error processing image:\", error);\n    return NextResponse.json(\n      { error: \"Failed to analyze the image\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,QAAQ,CAAC,CAAC,gBAAgB,IAAI,GAAG;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW;QAEjD,2BAA2B;QAC3B,MAAM,QAAQ,MAAM,8JAAA,CAAA,OAAI,CAAC,IAAI,CAAC;QAE9B,IAAI,YAAY;QAChB,IAAI,cAAc;QAElB,MAAM,IAAI,CAAC,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI;YACjE,MAAM,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACvC,aAAa;YACb;QACF;QAEA,MAAM,cAAc,YAAY;QAEhC,IAAI,eAAe;QACnB,IAAI,cAAc,KAAK;YACrB,eAAe;QACjB,OAAO,IAAI,cAAc,KAAK;YAC5B,eAAe;QACjB,OAAO,IAAI,cAAc,KAAK;YAC5B,eAAe;QACjB,OAAO;YACL,eAAe;QACjB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,QAAQ;QAAa,GAAG;YAAE,QAAQ;QAAI;IACnE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}