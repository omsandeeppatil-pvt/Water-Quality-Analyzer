{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/Water-Quality-Analyzer/app/api/analyze/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport * as Jimp from 'jimp';\n\ninterface WaterQualityMetrics {\n  ph: number;\n  turbidity: number;\n  dissolvedOxygen: number;\n  temperature: number;\n  conductivity: number;\n  totalDissolvedSolids: number;\n  chlorine: number;\n  hardness: number;\n}\n\ninterface ColorAverages {\n  red: number;\n  green: number;\n  blue: number;\n  brightness: number;\n  saturation: number;\n  variance: number;\n}\n\ninterface AnalysisResult {\n  overallQuality: string;\n  metrics: WaterQualityMetrics;\n  recommendations: string[];\n  safetyStatus: {\n    isDrinkable: boolean;\n    isSwimmable: boolean;\n    isIrrigationSafe: boolean;\n  };\n}\n\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get(\"file\");\n\n    if (!file || !(file instanceof Blob)) {\n      return NextResponse.json(\n        { error: \"Invalid file input\" },\n        { status: 400 }\n      );\n    }\n\n    const buffer = Buffer.from(await file.arrayBuffer());\n    \n    // Read image using Jimp\n    const image = await Jimp.read(buffer);\n    if (!image) {\n      throw new Error(\"Failed to read image\");\n    }\n    \n    const metrics = analyzeImage(image);\n    const overallQuality = determineWaterQuality(metrics);\n    const safetyStatus = assessWaterSafety(metrics);\n    const recommendations = generateRecommendations(metrics, safetyStatus);\n\n    const result: AnalysisResult = {\n      overallQuality,\n      metrics,\n      recommendations,\n      safetyStatus\n    };\n\n    return NextResponse.json(result, { status: 200 });\n  } catch (error) {\n    console.error(\"Error processing image:\", error);\n    return NextResponse.json(\n      { error: \"Failed to analyze the image\" },\n      { status: 500 }\n    );\n  }\n}\n\nfunction analyzeImage(image: Jimp): WaterQualityMetrics {\n  const width = image.getWidth();\n  const height = image.getHeight();\n  let colorTotals = {\n    red: 0,\n    green: 0,\n    blue: 0,\n    brightness: 0,\n    saturation: 0,\n    variance: 0\n  };\n  \n  // First pass: calculate averages\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const color = Jimp.intToRGBA(image.getPixelColor(x, y));\n      const { r: red, g: green, b: blue } = color;\n      \n      colorTotals.red += red;\n      colorTotals.green += green;\n      colorTotals.blue += blue;\n      colorTotals.brightness += (red + green + blue) / 3;\n      \n      const max = Math.max(red, green, blue);\n      const min = Math.min(red, green, blue);\n      colorTotals.saturation += max > 0 ? (max - min) / max : 0;\n    }\n  }\n\n  const totalPixels = width * height;\n  const averages: ColorAverages = {\n    red: colorTotals.red / totalPixels,\n    green: colorTotals.green / totalPixels,\n    blue: colorTotals.blue / totalPixels,\n    brightness: colorTotals.brightness / totalPixels,\n    saturation: colorTotals.saturation / totalPixels,\n    variance: 0\n  };\n\n  // Second pass: calculate variance\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const color = Jimp.intToRGBA(image.getPixelColor(x, y));\n      const { r: red, g: green, b: blue } = color;\n      \n      colorTotals.variance += \n        Math.pow(red - averages.red, 2) +\n        Math.pow(green - averages.green, 2) +\n        Math.pow(blue - averages.blue, 2);\n    }\n  }\n  \n  averages.variance = Math.sqrt(colorTotals.variance / (totalPixels * 3));\n\n  return {\n    ph: calculatePH(averages),\n    turbidity: calculateTurbidity(averages),\n    dissolvedOxygen: calculateDissolvedOxygen(averages),\n    temperature: calculateTemperature(averages),\n    conductivity: calculateConductivity(averages),\n    totalDissolvedSolids: calculateTDS(averages),\n    chlorine: calculateChlorine(averages),\n    hardness: calculateHardness(averages)\n  };\n}\n\nfunction calculatePH(averages: ColorAverages): number {\n  const rgRatio = averages.red / averages.green;\n  const bModifier = averages.blue / 255;\n  const baseValue = 7 + (rgRatio - 1) * 3.5;\n  return Math.max(0, Math.min(14, baseValue + (bModifier - 0.5)));\n}\n\nfunction calculateTurbidity(averages: ColorAverages): number {\n  const brightnessComponent = (255 - averages.brightness) / 6.375;\n  const varianceComponent = averages.variance / 30;\n  return Math.max(0, Math.min(40, brightnessComponent + varianceComponent));\n}\n\nfunction calculateDissolvedOxygen(averages: ColorAverages): number {\n  return Math.max(0, Math.min(15, (averages.blue / 255) * 10 + (averages.saturation * 5)));\n}\n\nfunction calculateTemperature(averages: ColorAverages): number {\n  return Math.max(0, Math.min(40, (averages.red / 255) * 40));\n}\n\nfunction calculateConductivity(averages: ColorAverages): number {\n  return Math.max(0, Math.min(2000, averages.variance * 5 + (averages.brightness / 255) * 1000));\n}\n\nfunction calculateTDS(averages: ColorAverages): number {\n  return Math.max(0, Math.min(1000, (averages.brightness / 255) * 500 + averages.variance * 2));\n}\n\nfunction calculateChlorine(averages: ColorAverages): number {\n  return Math.max(0, Math.min(4, ((averages.green - averages.blue) / 255) * 4));\n}\n\nfunction calculateHardness(averages: ColorAverages): number {\n  return Math.max(0, Math.min(300, ((averages.red + averages.green) / (2 * 255)) * 300));\n}\n\nfunction determineWaterQuality(metrics: WaterQualityMetrics): string {\n  const scores = {\n    ph: scoreInRange(metrics.ph, 6.5, 8.5),\n    turbidity: scoreInRange(metrics.turbidity, 0, 5),\n    dissolvedOxygen: scoreInRange(metrics.dissolvedOxygen, 6, 8),\n    tds: scoreInRange(metrics.totalDissolvedSolids, 0, 500),\n    chlorine: scoreInRange(metrics.chlorine, 0.2, 2),\n    hardness: scoreInRange(metrics.hardness, 60, 180)\n  };\n\n  const averageScore = Object.values(scores).reduce((a, b) => a + b) / Object.keys(scores).length;\n\n  if (averageScore >= 0.9) return \"Excellent\";\n  if (averageScore >= 0.7) return \"Good\";\n  if (averageScore >= 0.5) return \"Fair\";\n  return \"Poor\";\n}\n\nfunction scoreInRange(value: number, min: number, max: number): number {\n  if (value >= min && value <= max) return 1;\n  const midpoint = (min + max) / 2;\n  const deviation = Math.abs(value - midpoint) / (max - min);\n  return Math.max(0, 1 - deviation);\n}\n\nfunction assessWaterSafety(metrics: WaterQualityMetrics) {\n  const isDrinkable = \n    metrics.ph >= 6.5 && metrics.ph <= 8.5 &&\n    metrics.turbidity <= 1 &&\n    metrics.dissolvedOxygen >= 6 &&\n    metrics.totalDissolvedSolids <= 500 &&\n    metrics.chlorine >= 0.2 && metrics.chlorine <= 4;\n\n  const isSwimmable =\n    metrics.ph >= 6.0 && metrics.ph <= 9.0 &&\n    metrics.turbidity <= 5 &&\n    metrics.dissolvedOxygen >= 4;\n\n  const isIrrigationSafe =\n    metrics.ph >= 6.0 && metrics.ph <= 8.5 &&\n    metrics.totalDissolvedSolids <= 2000;\n\n  return {\n    isDrinkable,\n    isSwimmable,\n    isIrrigationSafe\n  };\n}\n\nfunction generateRecommendations(\n  metrics: WaterQualityMetrics, \n  safety: { isDrinkable: boolean; isSwimmable: boolean; isIrrigationSafe: boolean }\n): string[] {\n  const recommendations: string[] = [];\n\n  if (!safety.isDrinkable) {\n    if (metrics.ph < 6.5 || metrics.ph > 8.5) {\n      recommendations.push(`pH level (${metrics.ph.toFixed(1)}) is outside safe drinking range. Consider pH adjustment.`);\n    }\n    if (metrics.turbidity > 1) {\n      recommendations.push(\"Water turbidity is high. Filtration recommended before consumption.\");\n    }\n    if (metrics.chlorine < 0.2) {\n      recommendations.push(\"Chlorine levels are low. Consider additional disinfection.\");\n    }\n  }\n\n  if (metrics.hardness > 180) {\n    recommendations.push(\"Water is very hard. Consider using a water softener.\");\n  }\n\n  if (metrics.totalDissolvedSolids > 500) {\n    recommendations.push(\"High TDS levels detected. Consider reverse osmosis treatment.\");\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push(\"Water quality is within acceptable ranges. Regular monitoring recommended.\");\n  }\n\n  return recommendations;\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}